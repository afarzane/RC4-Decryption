-- ENSC 350
-- SFU, SPRING 2023

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lcd is
	port ( 
		KEY : in std_logic_vector (3 downto 0);
		SW : in std_logic_vector ( 17 downto 0); 
		LCD_BLON : out std_logic; -- backlight is always on
		LCD_ON : out std_logic; -- LCD is always on
		LCD_EN: out std_logic := '1'; -- connect the clock to the lcd_en input
		LCD_RW : out std_logic; -- always writing to the LCD
		LCD_RS : out std_logic; --
		LCD_DATA : out std_logic_vector (7 downto 0);
--		LEDG: out std_logic_vector (7 downto 0); -- send the clock to a green light
		CLOCK_27, CLOCK_50: in std_logic;
--		LEDR: out std_logic_vector (17 downto 0) -- send the clock to a red light LEDs
	);
end entity;

architecture rtl of lcd is

	signal next_state : std_logic_vector(3 downto 0) := "0000";
	signal current_state : std_logic_vector(3 downto 0) := "0000";
	signal dir, resetb, clk : std_logic;
	signal counter, screen_counter: std_logic_vector (25 downto 0) := (others => '0');

begin
	
	LCD_BLON <= '1'; -- backlight is always on
	LCD_ON <= '1'; -- LCD is always on
	LCD_RW <= '0'; -- always writing to the LCD
	LCD_EN <= clk;
--	dir <= SW(0);
	resetb <= KEY(3);
--	LEDG(7) <= resetb; -- for debugging
	
--	CLOCK_SLOWDOWN: process (CLOCK_50)
--	begin
--		if (rising_edge(CLOCK_50)) then
--			-- for a 1Hz clock we need 50Mhz divided by a number between 2^25 and 2^26) ~ 0.75s - 1.49s 
--			if (counter(25) = '1') then -- counter a total of 2^26 times at 50 MHz before triggering clk (slowed down clocked)
--				clk <= '1';
--				counter <= (others => '0'); -- reset all 2^26 counter bits to 0
--			else
--				clk <= '0';
--				counter <= std_logic_vector(unsigned(counter) + 1);
--			end if;
--		end if;
--	end process;


	NEXTE_LOGIC : process (current_state)
	begin 
		case current_state is
			when "0000" =>
				next_state <= "0001";
			when "0001" =>
				next_state <= "0010";
			when "0010" =>
				next_state <= "0011";
			when "0011" =>
				next_state <= "0100";
			when "0100" =>
				next_state <= "0101";
			when "0101" =>
				next_state <= "0110";
			when "0110" =>  -- THE LETTER G
				if dir = '1' then
					next_state <= "1010";
				else
					next_state <= "0111";
				end if;
			when "0111" =>  -- THE LEETER L
				if dir = '1' then
					next_state <= "0110";
				else
					next_state <= "1000";
				end if;
			when "1000" => -- THE LETTER O
				if dir = '1' then
					next_state <= "0111";
				else
					next_state <= "1001";
				end if;
			when "1001" => -- THE LETTER R
				if dir = '1' then
					next_state <= "1000";
				else
					next_state <= "1010";
				end if;
			when "1010" => -- THE LETTER I
				if dir = '1' then
					next_state <= "1001";
				else
					next_state <= "0110";
				end if;
			when others =>
				next_state <= "0000";
		end case;
	end process;

	process (clk, resetb)
	begin
		if (resetb = '0') then
			current_state <= "0000";
		elsif(screen_counter(6) = '1') then -- clear screen (go to state "0000") when 2^6 characters have been printed
			current_state <= "0000";
			screen_counter <= (others => '0');
		elsif(rising_edge(clk)) then
			current_state <= next_state;
			screen_counter <= std_logic_vector(unsigned(screen_counter) + 1); -- increment clear_screen counter
		end if;
	end process;
	
	OUTPUT_LOGIC : process (current_state)
	begin 
		-- LEDR used for debugging
		-- MOORE STATE only 
		if (current_state = "0000") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "00111000";
--			LEDR <= "000000000000000000";
--			LEDR(0) <= '1';
		elsif (current_state = "0001") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "00111000";
--			LEDR <= "000000000000000000";
--			LEDR(1) <= '1';
		elsif (current_state = "0010") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "00001100";
--			LEDR <= "000000000000000000";
--			LEDR(2) <= '1';
		elsif (current_state = "0011") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "00000001";
--			LEDR <= "000000000000000000";
--			LEDR(3) <= '1';
		elsif (current_state = "0100") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "00000110";
--			LEDR <= "000000000000000000";
--			LEDR(4) <= '1';
		elsif (current_state = "0101") then
			lcd_rs <= '0'; -- sending an instruction
			lcd_data <= "10000000";
--			LEDR <= "000000000000000000";
--			LEDR(5) <= '1';
		elsif (current_state = "0110") then  -- THE LETTER G
			lcd_rs <= '1'; -- sending an character
			lcd_data <= "01000111";
--			LEDR <= "000000000000000000";
--			LEDR(6) <= '1';
		elsif (current_state = "0111") then  -- THE LEETER L
			lcd_rs <= '1'; -- sending an character
			lcd_data <= "01001100";
--			LEDR <= "000000000000000000";
--			LEDR(7) <= '1';
		elsif (current_state = "1000") then -- THE LETTER O
			lcd_rs <= '1'; -- sending an character
			lcd_data <= "01001111";
--			LEDR <= "000000000000000000";
--			LEDR(8) <= '1';
		elsif (current_state = "1001") then -- THE LETTER R
			lcd_rs <= '1'; -- sending an character
			lcd_data <= "01010010";
--			LEDR <= "000000000000000000";
--			LEDR(9) <= '1';
		elsif (current_state = "1010") then -- THE LETTER I
			lcd_rs <= '1'; -- sending an character
			lcd_data <= "01001001";
--			LEDR <= "000000000000000000";
--			LEDR(10) <= '1';
		end if;
	end process;
	
end architecture;